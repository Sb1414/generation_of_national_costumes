from base64 import b16decode
from re import X
import numpy as np
import random

#Входные, промежуточные, выходные
INPUT_DIM = 4
OUTPUT_DIM = 3
H_DIM = 10

#входные данные
x = np.array([7.9, 3.1, 7.5, 1.8])

#веса
W1 = np.array([[-0.04021764495714504, -0.45244692784464413, 0.06090860932610076, -0.03767472239789449, 0.48264721356678036, 0.5647727216856329, -0.29410977957541595, 0.8782177229600279, -0.03942451715692468, 0.14657225789135256],
[0.7229512985911436, -0.27239597787146536, -0.07170074010218597, 0.013055021901873354, 0.005234477549739671, 0.0350661057486291, -0.38300759721361743, 0.5297595742736109, 0.8279860683170834, -0.30822551958072825],
[-0.44462961053022243, 0.4020908558835654, -0.252926026782069, -0.0673517465059138, -0.8148916280525, 0.5314647847663735, 0.004787911710301573, -1.1617906473107116, -0.7175611617592829, -0.06562782519486042], [-0.23960792248859486, 0.4525277989660023, -0.3803915265610277, -0.3159406740867201, 0.08402120338342836, 0.2502854311648793, -0.3821475700521576, -0.6309845761750267, 0.16122830285747478, 0.05807553309113637]])
b1 = np.array([[0.328826926968454, 0.2050070309728199, 0.23393744454770826, -0.29277677675320746, 0.3050295105366429, 0.34593169323563816, 0.3699932396345874, 0.7331841218929512, 0.5611575308817518, -0.02266146140070105]])
W2 = np.array([[0.8081295197586562, -0.16105430796503167, -0.008581572631755621],
[0.034319934109683134, -0.1597777095266255, -0.2264420979096561],
[-0.04932081429366125, -0.1066071067646293, 0.14995581198793018],
[0.27724620771295555, -0.026755625124068858, 0.12972593175256325],
[0.6877593987646415, -0.31123694021220577, 0.0040338430279313045],
[-0.49965723851847405, 0.09533967557484024, 0.47880307328753363],
[0.09202128573155093, -0.08800356251393808, 0.29989429434263776],
[0.834718242219331, 0.6739709061774118, -1.3509639286034925],
[0.878199550155253, -0.45067406561178924, -0.037701149986934496],
[0.23929962307682442, 0.03394880364928278, 0.04349887838382894]])
b2 = np.array([[-0.05311956200333481, 0.47112830885200385, 0.06814276712965595]])

#создание функции relu максимум от пришедшего до 0
def relu(t):
    return np.maximum(t, 0)

#создание функции softmax для сведения к вероятности
def softmax(t):
    out = np.exp(t)
    return out / np.sum(out)

#forward propagation
def predict(x):
    t1 = x @ W1 + b1 
    h1 = relu(t1) 
    t2 = h1 @ W2 + b2 
    z = softmax(t2) 

probs = predict(x)
pred_class = np.argmax(probs)
class_names = ['Setosa', 'Versicolor', 'Virginica']
print('Predict class is', class_names[pred_class])